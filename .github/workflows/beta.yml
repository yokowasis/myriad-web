name: Beta automation

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+-beta[0-9]+'

concurrency:
  group: beta-automation

jobs:
  compute-build-info:
    runs-on: ubuntu-latest

    outputs:
      latest_tag: ${{ steps.build-info.outputs.latest_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          version=${GITHUB_REF#refs/*/}
          echo $version
          echo "::set-output name=latest_tag::$version"

  build-and-publish-docker-image:
    runs-on: ubuntu-latest

    needs: compute-build-info

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-release-candidate
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          file: .maintain/docker/Dockerfile
          tags: |
            ${{ github.repository }}:${{ needs.compute-build-info.outputs.latest_tag }}
            ${{ github.repository }}:latest-beta
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest

    needs: [compute-build-info, build-and-publish-docker-image]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.PREPROD_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.PREPROD_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            FIREBASE_PROJECT_ID:${{ secrets.PREPROD_GCP_PROJECT_ID }}/FIREBASE_PROJECT_ID
            FIREBASE_API_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/FIREBASE_API_KEY
            FIREBASE_MESSAGING_SENDER_ID:${{ secrets.PREPROD_GCP_PROJECT_ID }}/FIREBASE_MESSAGING_SENDER_ID
            FIREBASE_APP_ID:${{ secrets.PREPROD_GCP_PROJECT_ID }}/FIREBASE_APP_ID
            SENTRY_DNS:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SENTRY_DNS
            CLOUDINARY_CLOUND_NAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/CLOUDINARY_CLOUND_NAME
            CLOUDINARY_API_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/CLOUDINARY_API_KEY
            CLOUDINARY_SECRET:${{ secrets.PREPROD_GCP_PROJECT_ID }}/CLOUDINARY_SECRET
            FACEBOOK_APP_ID:${{ secrets.PREPROD_GCP_PROJECT_ID }}/FACEBOOK_APP_ID
            TWITTER_BEARER_TOKEN:${{ secrets.PREPROD_GCP_PROJECT_ID }}/TWITTER_BEARER_TOKEN
            SSH_HOST:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_PORT

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            helm repo add myriad https://charts.myriad.systems
            helm repo update
            helm upgrade myriad-web myriad/myriad-web \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.new_tag }} \
              --set-string config.appName=myriad-staging \
              --set-string config.nextAuthURL=https://app.stg.myriad.systems \
              --set-string config.nextSecret=b53fdfd09ee04c267efcde87b4eab030 \
              --set-string config.apiURL=https://api.stg.myriad.systems \
              --set-string config.rpcWSURL=wss://rpc.stg.myriad.systems \
              --set-string config.firebase.projectId=${{ steps.secrets.outputs.FIREBASE_PROJECT_ID }} \
              --set-string config.firebase.apiKey=${{ steps.secrets.outputs.FIREBASE_API_KEY }} \
              --set-string config.firebase.messagingSenderId=${{ steps.secrets.outputs.FIREBASE_MESSAGING_SENDER_ID }} \
              --set-string config.firebase.appId=${{ steps.secrets.outputs.FIREBASE_APP_ID }} \
              --set-string config.sentry.dns=${{ steps.secrets.outputs.SENTRY_DNS }} \
              --set-string config.cloudinary.cloudName=${{ steps.secrets.outputs.CLOUDINARY_CLOUND_NAME }} \
              --set-string config.cloudinary.apiKey=${{ steps.secrets.outputs.CLOUDINARY_API_KEY }} \
              --set-string config.cloudinary.secret=${{ steps.secrets.outputs.CLOUDINARY_SECRET }} \
              --set-string config.facebook.appId=${{ steps.secrets.outputs.FACEBOOK_APP_ID }} \
              --set-string config.twitter.bearerToken=${{ steps.secrets.outputs.TWITTER_BEARER_TOKEN }} \
              --set ingress.enabled=true \
              --set-string ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="10" \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/proxy-body-size"="100m" \
              --set-string ingress.annotations."nginx\.org/client-max-body-size"="100m" \
              --set-string ingress.hosts[0].host=app.stg.myriad.systems \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-app-tls \
              --set-string ingress.tls[0].hosts[0]=app.stg.myriad.systems \
              --set autoscaling.enabled=true
            kubectl rollout status deployment/myriad-web
